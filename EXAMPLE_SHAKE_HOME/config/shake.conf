# $Revision: 1217 $	DO NOT REMOVE OR CHANGE THIS LINE
###########################################################################
# shake.conf: configuration file for the program 'shake'
# 'shake' is the main process used to generate a ShakeMap.  It is 
# essentially a shell that runs other programs, and makes  decisions 
# about the command-line flags with which to run those programs
###########################################################################

###########################################################################
# program:
# Programs to run, in the order to run them.  After the first program is
# run, the system expects to find the "event.xml" file in the data
# directory ($shake_home/data/<event_id>/input).  The first program may not
# use any magnitude-dependent (or other event-specific) flags.
#
#	program : program_name
#
# "program_name" is the name of the program to run, and is expected to be
# found in <SHAKE_HOME>/bin.
#
# There is a special program 'sleep' that may be inserted anywhere in
# the processing sequence, and may appear multiple times. It requires
# an argument specifying the number of seconds to sleep, e.g.:
#
#	program : sleep 5
#
# would tell the system to sleep for 5 seconds before executing the next
# program in the sequence. sleep should only be used to correct minor 
# timing differences between systems (for instance, to sleep for a couple
# of seconds before running 'retrieve' to accommodate a short delay between
# an event alarm and the availability of amplitude data in the database).
#
# Any of the specified programs may also be given one or more arguments.
# Generally arguments should be specified with the default_flags and
# variable_flags parameters (see below), however, this mechanism is 
# available to allow some special behaviors (sleep, cleanu).
#
# As with sleep and cleanup, the program 'transfer' may appear more than
# once in the sequence provided that all but the last instance use the
# flags '-noversion' and '-forget'.  For example:
#
#	...
#	program : genex
#	program : transfer -pdl -noversion -forget
#	program : cleanup -config cleanup1.conf
#	program : transfer -www 
#	program : cleanup -config cleanup2.conf
#	...
#
# After running genex, transfer would run its transfers to the USGS PDL
# servers with -pdl.  Then cleanup would run with the config file 
# cleanup1.conf, which might delete some subset of the ShakeMap products, 
# before transfer is run a second time to its www destinations.  Finally, 
# cleanup would run a second time using the config file cleanup2.conf, 
# which might delete all of the files in the genex directory to save space 
# on the production machine. Also note that transfer could have used 
# different config files for each of its runs.
# (Note that if you use these non-standard config files, they will not
# be updated automatically if the underlying config file is changed in
# a ShakeMap update -- you are responsible for noting any changes and
# propagating them to your custom-named files.)
###########################################################################
#program		: retrieve
program		: grind
program		: tag
program		: mapping
program		: genex
#program		: print
#program		: transfer
program		: setversion
#program		: plotregr
#program		: addon
#program		: shakemail

###########################################################################
# once_only:
# The once_only statement allows you to specify programs (from the program
# list above) that should be run only once per event if shake is called
# with the -once_only flag (i.e. repeated runs of an event will not run
# these programs); this is useful for programs that generate automatic
# output or data distribution that would be wasteful, confusing, or annoying
# to produce repeatedly; the queue always calls shake with the -once_only
# flag.
###########################################################################
once_only : print
once_only : shakemail
once_only : addon

###########################################################################
# no_dep:
# The no_dep statement indicates programs in the above program list
# that do not create products needed by later programs (i.e., programs
# that no program later in the processing sequence depends upon).
# For instance, genex depends on the products of mapping, but not
# those of shakemail; since no other program depends on shakemail,
# a line should be added below:
#
#		no_dep : shakemail
#
###########################################################################
no_dep          : retrieve
no_dep		: tag
no_dep		: shakemail
no_dep		: addon
no_dep		: print
no_dep		: setversion
no_dep		: plotregr
no_dep		: cleanup

###########################################################################
# cancel:
# List programs that are affected when an event is cancelled.
# These are programs that, if they were run, should be cancelled by
# calling them with the '-cancel' flag.  The cancel program will first
# check that a program was run before running it again with '-cancel',
# so it is okay to list programs here that may not have been run for
# an event.  Some programs do not need to be listed here: retrieve, 
# grind, tag, mapping, genex, transfer, and print.
###########################################################################
cancel  : shakemail
cancel  : addon

###########################################################################
# Default flags for various programs; these are the flags that can be set
# without knowing the specifics of the events; syntax:
#
#	default_flags : prog_name flag1 flag2 ... flagN
#
###########################################################################
default_flags	: retrieve
default_flags	: grind -qtm -xml
default_flags	: mapping -timestamp -itopo -verbose
default_flags	: shakemail
default_flags	: genex -zip -metadata -shape shape
default_flags	: print
default_flags	: transfer -www -push
default_flags	: addon
default_flags	: plotregr -lab_dev 6

###########################################################################
# For scenarios, don't run certain programs
###########################################################################
scenario_skip : retrieve
scenario_skip : print
scenario_skip : shakemail
scenario_skip : addon
scenario_skip : plotregr

###########################################################################
# Magnitude-dependent flags for the programs; syntax:
#
#	variable_flags : prog_name min_mag max_mag flag_string
#
# where,
# prog_name    is the name of the program to which the flags will
#              apply
# min_mag      is the event magnitude which must be attained or exceeded
#              in order for the flag to be used 
# max_mag      is the magnitude at and above which the flag will no longer 
#              be used
# flag_string  is a flag or series of flags to be used.
#
# Example:
#
# 	variable_flags	: grind 7.0 9.9 -lonspan 4.6
#
# The program "grind" will be given the command line string "-lonspan 4.6" if
# the following relation holds for the event magnitude M:
#
#		7.0 <= M < 9.9
#
###########################################################################

###########################################################################
# Magnitude at which the longitude span is increased to account for the
# larger area of significant ground motion
###########################################################################
variable_flags	: grind 4.0 5.0 -lonspan 3.0
variable_flags	: grind 5.0 6.0 -lonspan 4.0
variable_flags	: grind 6.0 9.9 -lonspan 6.0

###########################################################################
# Magnitude at which spectral response maps are made, if possible
###########################################################################
variable_flags	: grind 4.8 9.9 -psa
variable_flags	: plotregr 4.8 9.9 -psa

###########################################################################
# For events 5.0 or bigger, make the HAZUS input file.
###########################################################################
variable_flags	: genex 4.8 9.9 -shape hazus

###########################################################################
# These flags specify the magnitude at which various printing
# actions are to take place; the printers that correspond to each category
# can be found in the print.conf file
###########################################################################
variable_flags	: print 0.0 3.5 -category 0
variable_flags	: print 3.5 4.5 -category 1
variable_flags	: print 4.5 6.0 -category 1,2
variable_flags	: print 6.0 9.9 -category 1,2,3

###########################################################################
# The category-3 printing (mag 6.0+) needs a poster-sized output file from
# mapping...
###########################################################################
#variable_flags	: mapping 5.5 9.9 -poster

###########################################################################
# Highlight the larger events in the archive list...
###########################################################################
#variable_flags	: tag 6.0 9.9 -mainshock

###########################################################################
# Save the input and configs for each version of large events
###########################################################################
variable_flags	: setversion 6.0 9.9 -savedata 
