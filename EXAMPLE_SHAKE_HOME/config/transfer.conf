# $Revision: 1193 $	DO NOT REMOVE OR CHANGE THIS LINE
########################################################################
# transfer.conf: configuration file for 'transfer'
# The 'transfer' program moves selected files and groups of files from
# a source directory  to web or ftp directories on the local or remote 
# machines.  This configuration file allows the user to customize the 
# behavior of 'transfer' by designating destinations and lists of files
# to send to those destinations.  Each 'destination' object defined 
# within this file will install the files defined by a single
# 'filelist' object to the specified directory on the target machine.
# A single filelist may be sent to several destinations, however.
########################################################################

########################################################################
# sourcedirectory  [optional parameter]
# Specifies the root directory from which files in filelists will be 
# transferred. The line has the form:
#
#	sourcedirectory : path
#
# The string "<SHAKE_HOME>" will be replaced with the ShakeMap install 
# dir. If an event id is passed to transfer with the -event flag, 
# "/<EVID>/genex" will be appended to sourcedirectory.
#
# The default value is <SHAKE_HOME/data>.
#
########################################################################
sourcedirectory	: <SHAKE_HOME>/data

########################################################################
# password
# Gives the location of a file containing passwords needed by ftp to
# connect to remote hosts;  the line has the form:
#
#	password : path
#
# where 'path' is the path to file relative to the ShakeMap installation
# directory.
#
# See the documentation within the module Shake::Password.pm for the
# format of the password file.
#
########################################################################
password	: pw/passwords

########################################################################
# Programs
#
# This parameter is used to designate the paths to specific programs
# used by the 'method' parameter (see below). The methods 'cp' and 
# 'ftp' use built in commands, and do not need to be specified here.
# If you use 'rcp' you must specify a path for 'rsh', and if you use 
# 'scp' you must specify a path for 'ssh'.  In both cases you must 
# also specify the path to 'tar'.  It is assumed that on the remote 
# machine 'rm', 'cd' and 'tar' are within the search path of the 
# invoked shell.  This is probably a naive assumption.
#
# 'rsync' transfers files via the rsync protocol, and is now preferred to 
# scp for reasons of speed and reliability.  For rsync, specify a path to 
# *both* 'ssh' and 'rsync' on the local machine.  For more on rsync, see 
# the "Destinations" documentation, below.
#
# Format:
#		program : method path
#
# Example:
#		program : rsh /usr/bin/rsh
#		program : tar /usr/bin/tar
#		program : ssh /usr/bin/ssh
#		program : rsync /usr/local/bin/rsync
#
########################################################################
program : rsh /usr/bin/rsh
program : tar /bin/tar
program : ssh /usr/bin/ssh
program : rsync /usr/bin/rsync

########################################################################
# Destinations
#
# Multiple destinations may be defined; each destination definition 
# begins with a line of the form:
#
#	destination : machine [ port ]
#
# where 'machine' is the name of the destination computer and the optional
# 'port' is the port to which the FTP client should attach (the 'port' 
# parameter only applies when 'method' (see below) is 'ftp' and is only
# necessary when the port is something other than the normal, default port); 
# all of the lines that follow the destination apply to that destination 
# (except those affiliated with a filelist (see below)) until another 
# destination line is read, thus repeated 'method', 'destdir' or 'list' 
# lines will simply override earlier lines of the same type; the lines 
# required for a valid destination are:
#
#	method   : <ftp | rcp | scp | cp> [ username  password ]
# or
#	method   : rsync [ username [ rsync args ]]
#
#	ttype	 : <www | ftp | push>
#	destdir  : path
#	senddone : <true | false>
#	list     : filelist
#
# The 'method' line specifies the type of transfer to be used; currently
# acceptable are:
#
#	ftp: uses the ftp protocol to transfer files to the remote
#            host; this method requires the optional arguments 'username'
#            and 'password', where the username is the account to
#            ftp into, and 'password' is the password for that account;
#            if password is the literal string "password" or is left blank,
#            the program will use the password file in the "password" 
#	     directive, above, to look up the password for that username
#	     on the destination machine.
#
#	rcp: not really an rcp at all, but does something lile: 
#
#		tar -cf - * | rsh remote_machine (cd destdir; tar -xf -)
#
#            (note that the use of tar means that the entire directory tree 
#            starting at the source directory is transferred to the remote 
#            system, as if 'copydirectory' were 'true', and listing 
#	     individual files in the filelist is redundant).  If 
#	     'username' is given it is passed to rsh, otherwise the 
#	     current user is assumed; in either case, the user must have 
#	     permission to remotely access the account in question, this 
#	     is usually achieved through the use of an .rhosts file.
#
#	scp: like 'rcp, but uses 'ssh' to send the tar file (in a secure 
#	     manner) to the remote system from a trusted host.  If 
#	     'username' is given it is passed to 'ssh' otherwise the 
#	     current user is assumed; in either case, the user must have 
#	     permission to remotely access the account in question, this 
#            is usually achieved through the use of an .shosts file or by
#	     setting up the appropriate entries in the authorized_keys file.
#            It is possible to specify a non-standard location for the ssh-key
#            using the ssh_privatekey parameter
#	     See the documentation for 'ssh' for details.
#
#	rsync: Uses the rsync protocol to transfer files to the remote
#	       system.  Like rcp and scp, above, the entire directory is
#	       copied, and individual file specifications in the associated
#	       filelist are unnecessary and redundant.  rsync is preferred
#	       over scp -- it is faster and more reliable.  'username' should
#	       usually be specified (even if it is the current user) as the
#	       'rsync args' argument is often required to make rsync 
#	       function properly.  Note that even if the transfer appears 
#	       to work manually, it can often fail in automatic mode (e.g.,
#	       when run by queue or from a cron job) because of unresolved 
#	       path issues -- we strongly recommend testing in automatic
#	       mode prior to trusting the system.  The 'rsync args' argument
#	       can actually contain any argument(s) to the rsync command
#	       and will be specific to the receiving system.  For example,
#	       "--rsync-path=<path_to_rsync>" may be needed for some 
#	       remote systems.  See the rsync man page for details and 
#	       more options.
#              It is possible to specify a non-standard location for the ssh-key
#              using the ssh_privatekey parameter
#
#	cp:  uses the perl File::Copy and File::Path modules to move the
#            files to their destination directory; this will only work
#            for transfers to locally mounted disks to which the current
#            user has permission to write.
#
# 'ttype' specifies one of three categories of transfer: 'www', 'ftp',
# and 'push'; destinations of the specified type correspond to the
# invoking flags of the transfer program: '-www', '-ftp', and '-push'
# respectively, with transfers only occuring when the ttype matches
# the invoking flag; additionally, the behavior of the '-cancel' flag has
# a different effect depending on ttype: for 'www' and 'ftp' the files
# at the destination are deleted, if possible, for 'push' a file
# <eventid>.cancel is pushed to the destination.  IMPORTANT: the only
# valid method for ttype 'push' is 'ftp'.
#
# The 'destdir' line specifies the root directory into which the files
# will be transferred; if 'path' does not exist, the program will try
# to make it and all of the necessary parent directories; in the destdir
# path, the string "<EVID>" will be replaced with the event id, the
# string <VERSION> will be replaced by the version number of the map 
# and the string "<SHAKE_HOME>" will be replaced with the ShakeMap 
# install dir.
#
# The optional 'senddone' statement specifies whether or not to push
# a file named "<eventid>.done" to the destination after all other
# files have been pushed; if 'true', the file will be sent, if 'false' 
# the file will not be sent; the default is 'false; senddone may only be 
# set to true if 'ttype' is 'push'
#
# The 'list' line gives the name of a filelist, specified below.
#
# Examples:
#
#	destination	: garnet.gps.caltech.edu
#	ttype		: www
#	method		: cp
#	destdir		: <SHAKE_HOME>/web
#	list		: weblist
#
#	destination     : sc1.gatekeeper.com
#	ttype           : push
#	method          : ftp shakeftp
#	destdir         : <EVID>-<VERSION>
#	list            : ftplist
#
#	destination     : flint.gps.caltech.edu
#	ttype           : www
#	method          : rsync shake --rsync-path=/usr/local/bin/rsync
#       ssh_privatekey  : /home/shake/pw/.ssh/id_rsa
#	destdir         : /home/html/trinet
#	list            : weblist
#
########################################################################

########################################################################
# File lists
#
# The 'filelist' blocks associate a name with a list of files (and 
# optionally the file types, whether ascii or binary); all lines following
# a filelist line are assumed to apply to that filelist (except those
# that would be associated with the current destination) until the
# next occurence a 'filelist' definition line; each filelist line has
# the form:
#
#	filelist : list_name
#
# where 'list_name' corresponds to the string used to identify the 'list' 
# one of the the destination blocks, above;
#
# The 'filelist' line may be followed by an optional line of the form:
#
#	copydirectory : [ true | false ]
#
# the default condition when the 'copydirectory' line is not given is
# "false"; copydirectory specifies whether or not the files in the 
# directory given by the 'directory' line (see below) should be added
# to the filelist; 'copydirectory' must precede 'directory' to have any
# effect; note that when the 'ttype' for a destination that uses this
# filelist is 'rcp' or 'scp', the directory will be copied as if
# copydirectory were true.
#
# The next (required) line has the form:
#
#	directory : path [ a | b ]
#
# where "path" is relative to "<shake_home>/data/<event_id>/genex"; all
# files in the filelist will thus be relative to 
# "<shake_home>/data/<event_id>/genex/path"; if 'copydirectory' is true,
# all of the files in "path" and its subdirectories will be added to the
# filelist -- note that the subdirectory structure is preserved by the
# transfer process; an optional 'a' or 'b' may follow the path to specify
# the ftp transfer mode for files in the path (a = ascii, b = binary), 'b' 
# is the default, this group transfer mode specification may be overridden
# for individual files by using 'file' lines (see below); the transfer mode
# specification is only relevant in cases where the ttype for the 
# destination using this list is 'ftp';
#
# The directory line may be followed by any number of lines of the
# form:
#
#	file : filepath [ a | b ]
#
# where 'filepath' specifies a file relative to 
# "<shake_home>/data/<event_id>/genex/path" (where 'path' is given by
# the 'directory' line, above); the optional 'a' or 'b' following the 
# filepath specifies the ftp transfer mode (a = ascii, b = binary), 'b' 
# is the default; if the file specified does not yet exist in the 
# filelist, it is added to the list, if it already exists in the list,
# its transfer mode is updated to the one specified (or 'b' if none
# is given).  Files with the extension .jpg or .zip do not need to
# be listed as they are assumed to be binary.
#
# In both directory and file lines, the string "<EVID>" will be replaced 
# with the event id.
#
# Examples:
#
#	filelist	: ftplist
#	copydirectory	: true
#	directory	: ftp a 
#
#	filelist	: weblist
#	copydirectory	: true
#	directory	: web a
########################################################################
filelist      : weblist
copydirectory : true
directory     : web a

########################################################################
# The following list is custom-configured to transfer the event 
# directory files to the secondary server when transfer is called
########################################################################
filelist        : eventlist
copydirectory   : true
directory       : ../ b

########################################################################
# The following list is pre-configured to transfer the permanent
# (i.e., non-event-specific) files to the web sites (i.e., ttype 'www')
# when transfer is called with with -permweb.  Do not delete or 
# otherwise modify this list.
########################################################################
filelist        : permlist
copydirectory   : true
directory       : permanent b

########################################################################
# PDL parameters. If you use PDL to transfer data via the -pdl flag,
# you MUST set these parameters. 
#
# pdl_java   - the path to the java executable
# pdl_client - the full path to the ProductClient.jar file
# pdl_source - this is the product source code provided by the 
#              operator of the PDL server when you registered your
#              client; it will most often be your network ID code
# pdl_type   - the type of the product being transfered as provided by the
#              operator of the PDL server; it will almost always be 
#              "shakemap"
# pdl_scenariotype - the type of the product being transfered when the event
#              is a scenario; this will almost always be "shakemap-scenario"
# pdl_code   - the full product code by which this map will be known;
#              it is usually the network ID prepended to the local
#              event ID; if the event ID is of the form "string1.string2"
#              (see pdl_eventsourcecode, below), it is assumed that this
#              ShakeMap is an auxiliary map, and will be associated with
#              the event ID given by string1.
# pdl_eventsource - the code of the source network (e.g., 'ci', 'uu', etc.)
# pdl_eventsourcecode - the event ID within the source network; if the event
#              ID is of the form "string1~string2" (e.g., "9180645~zoom"), 
#              then "string1" will be used as the event ID (i.e., the
#              pdl_eventsourcecode), and "string1~string2" will be appended 
#              to the source network ID to form the pdl_code (see above). 
#              See the note below for an alternate way of specifying 
#              auxiliary maps.
# pdl_privatekey - the path to the sender's private key, the partner
#              to the public key provided to the operator of the
#              PDL server
# pdl_config - the path to the PDL config file; this parameter is optional
#              for versions of PDL before v1.7.3, but is mandatory for 
#              version v1.7.3 and later.
#
# All parameters must be assigned values, and there are no defaults other 
# than pdl_type ("shakemap") and pdl_scenariotype ("shakemap-scenario") 
# (neither of which should overridden without explicit instructions 
# from your PDL administrator).
#
# For pdl_code and pdl_eventsourcecode, the macro "<EVENT>" will be
# replaced by the actual event ID, and the macro "<EVT_NETWORK>" 
# will be replaced with the the string specified in the "network" 
# attribute of the "event" tag in event.xml. The <EVT_NETWORK> macro
# will typically only be useful to operators who make ShakeMaps for 
# multiple networks.
#
# Example (for Southern California, network code "ci"):
#
#	pdl_java : /usr/bin/java
#	pdl_client : /home/shake/ProductClient/ProductClient.jar
#	pdl_source : ci
#	pdl_type : shakemap
#	pdl_scenariotype : shakemap-scenario
#	pdl_code : ci<EVENT>
#	pdl_eventsource : ci
#	pdl_eventsourcecode : <EVENT>
#	pdl_privatekey : /home/shake/.ssh/id_dsa
#
# Note: If you run auxiliary maps using the convention "eventID" and 
# "eventID~auxString" (e.g., "123456" and "123456~zoom"), then the
# above configuration will work automatically. If you use the same
# event ID for both the main map and your auxiliary map(s) (by having
# a separate set of configs, data directories, etc.), then you will want
# to use the above form for your main maps, but the transfer.conf for 
# your auxiliary maps should substitute a unique pdl_code. E.g.:
#
#	pdl_code : ci<EVENT>~zoom
#
# Each map you wish associated with <EVENT> should have a unique
# extension (e.g., "~zoom", "~Los_Angeles", etc.), though in this
# case, the separator can by any other symbol that doesn't cause
# problems with shells or URLs (i.e., stick with '.', '_', '-', 
# and '~'). In this usage, no separator also works (e.g., "ci<EVENT>zoom"
# is a valid pdl_code).
#
########################################################################

########################################################################
# maxwait - sets the time limit (in seconds) the program will wait for a 
# transfer to a destination to complete. The default is 60.
#
# Note: if you use the -nofork option, the total program run time could be
# as much as maxwait times the number of destinations (including the
# PDL transfer, if invoked, and any pushcmd's). For the normal, forking,
# operation, the program will wait a maximum of maxwait seconds for 
# each set of max_child_count (currently 10) destinations.
#
# Example:
#
# 	maxwait : 60
#
# waits up to 60 seconds for transfers to finish.
########################################################################

########################################################################
# pushcmd
# The pushcmd statement allows the user to specify a command or commands
# to be executed when transfer is called with the '-push' flag; it is
# intended the execute the "push" code on a remote machine, but could
# be used to do pretty much anything and is therefore dangerous;
# Within the command, the following macro substitutions are made (note
# that the angle brackets [i.e., "<" and ">"] are part of the macro):
#
#	<EVENT>       is replaced with the event ID 
#	<EVID>        is replaced with the event ID 
#	<VERSION>     is replaced with the version of the map
#	<EVT_NETWORK> is replaced with the source network (not the producing
#                     network)
#       <EVT_ID>      is replaced with the source's ID of the earthquake 
#                     (i.e., the evid from the event.xml file)
#
# The pushcmd commands are executed after all of the other
# transfer actions; multiple 'pushcmd' statements are allowed.
# Examples:
#
#	pushcmd : ./push -event <EVENT>
#
# This runs the program '<shake_home>/bin/push' with the -event flag and 
# the event id as arguments.
#
#	pushcmd : /usr/local/bin/ssh -v terra10.gps.caltech.edu &&
#		  /home/shake/bin/push -event <EVENT> 2>>       &&
#		  /home/shake/pga/shake_logs/ssh.log &
#
# This line uses 'ssh' to run '/home/shake/bin/push' in the background on 
# the machine terra10.gps.caltech.edu, and to log the ssh noise to 
# /home/shake/pga/shake_logs/ssh.log
#
#	pushcmd : (cd /; /usr/bin/rm -r *)
#
# Does very bad things.
#
########################################################################
# pushcmd : /usr/local/bin/ssh -v terra10 /home/shake/bin/push &&
# 	-event <EVENT> 2>> /home/shake/pga/shake_logs/ssh.log &

########################################################################
# unpushcmd
# The unpushcmd statement specifies a statement to run when transfer
# is invoked with the flags '-push -cancel'.  It is otherwise identical
# in behavior to the pushcmd statement (see above)
########################################################################
# unpushcmd : /usr/local/bin/ssh -v terra10 /home/shake/bin/push -cancel &&
# 	-event <EVENT> 2>> /home/shake/pga/shake_logs/ssh.log &
